#!/usr/bin/env ruby
require 'octokit'
require 'faraday-http-cache'
require 'colorize'
require 'terminal-table'

ACCEPT = 'application/vnd.github.v3+json'

class Client
  HEADINGS = %w(title user labels status mergeable url)

  attr_reader :octokit_client, :org

  def initialize(access_token, github_username, org)
    @org = org
    @github_username = github_username
    setup_octokit(access_token)
  end

  def show_table
    table = Terminal::Table.new(headings: HEADINGS) do |tab|
      threads.each_with_index do |t, j|
        Array(t.value).each_with_index do |row, i|
          tab.add_separator if i == 0 && j != 0
          tab.add_row row
        end
      end
    end
    print "\r" # Rewind to beginning of line
    puts table
  end

  private

  def setup_octokit(access_token)
    stack = Faraday::RackBuilder.new do |builder|
      builder.use Faraday::HttpCache
      builder.use Octokit::Response::RaiseError
      builder.adapter Faraday.default_adapter
      builder.response :logger if ENV['DEBUG']
    end
    Octokit.middleware = stack

    @octokit_client = Octokit::Client.new(access_token: access_token)
    @octokit_client.auto_paginate = true
  end

  def threads
    @octokit_client.org_repos(org).map do |repo|
      Thread.new { fetch_pulls(repo) }
    end
  end

  def fetch_pulls(repo)
    dot(:green)
    return [] if pull_requests(repo).size == 0

    threads = pull_requests(repo).map do |pr|
      Thread.new do
        number = pr.number

        [fetch_pull(repo, number),
         fetch_status(repo, pr),
         fetch_labels(repo, number)]
      end
    end

    header = ["#{repo.name} (#{pull_requests(repo).size})".blue,
              '',
              '',
              '',
              '',
              '']

    threads.reduce([header]) do |result, thread|
      result << result_column(*thread.value)
    end
  end

  def result_column(pr, status, labels)
    [pr.title,
     colorize_login(pr.user.login),
     labels,
     status,
     pr.mergeable ? 'Yes'.green : 'No'.red,
     pr.html_url.underline]
  end

  def fetch_pull(repo, number)
    dot(:blue)
    @octokit_client.pull_request(repo.id, number)
  end

  def fetch_status(repo, pr)
    dot(:yellow)
    state = ''

    begin
      state = get_state(repo, pr)
      dot(:green)
    rescue Octokit::NotFound
      dot(:red, 'X')
    end

    color_state(state)
  end

  def fetch_labels(repo, number)
    dot(:yellow)
    labels = []

    begin
      labels = @octokit_client.labels_for_issue(repo.id, number)
                              .map(&:name)
                              .map(&:yellow)
    end

    labels.join(', ')
  end

  def pull_requests(repo)
    @pull_requests       ||= {}
    @pull_requests[repo] ||=
      @octokit_client.pull_requests(repo.id, state: 'open')
  end

  def colorize_login(login)
    if login == @github_username
      login.magenta
    else
      login.red
    end
  end

  def dot(color, str = '.')
    print str.send(color)
  end

  def get_state(repo, pr)
    status = @octokit_client.status(repo.full_name,
                                    pr.head.sha,
                                    accept: ACCEPT)
    if status.total_count == 0
      '--'
    else
      status.state
    end
  end

  def color_state(state)
    case state
    when 'success'
      state.green
    when 'pending'
      state.yellow
    else
      state.red
    end
  end
end

client = Client.new(ENV['GITHUB_ACCESS_TOKEN'],
                    ARGV.shift || ENV['GITHUB_USERNAME'] || 'omegahm',
                    ARGV.shift || ENV['GITHUB_ORGANISATION'] || 'lokalebasen')
client.show_table
