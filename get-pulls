#!/usr/bin/env ruby
require 'octokit'
require 'faraday-http-cache'
require 'colorize'
require 'terminal-table'

def fetch_pulls(client, repo)
  print '.'

  pull_requests = client.pull_requests(repo.id, state: 'open')
  return [] if pull_requests.size == 0

  header = ["#{repo.name} (#{pull_requests.size})".blue, '', '']
  pull_requests.inject([header]) do |rs, pr|
    rs << [pr.title, pr.user.login.red, pr.html_url.underline]
  end
end

# Setup
stack = Faraday::RackBuilder.new do |builder|
  builder.use Faraday::HttpCache
  builder.use Octokit::Response::RaiseError
  builder.adapter Faraday.default_adapter
end
Octokit.middleware = stack

client = Octokit::Client.new(access_token: ENV['GITHUB_ACCESS_TOKEN'])
client.auto_paginate = true

# Parse argument
org = ARGV.shift || 'lokalebasen'

# Spawn threads
threads = client.org_repos(org).collect do |repo|
  Thread.new { fetch_pulls(client, repo) }
end

# Create table
table = Terminal::Table.new(headings: ['title', 'user', 'url']) do |tab|
  threads.each_with_index do |t, j|
    Array(t.value).each_with_index do |row, i|
      tab.add_separator if i == 0 && j != 0
      tab.add_row row
    end
  end
end

print "\r"
puts table
